for(int i=1;i<N;i++) {
	for(int j=1;j<M;j++) {
		data[i][j] = data[i-1][j] + data[i][j-1] + data[i-1][j-1];
	}
}

int larger_dim = N, smaller_dim = M;

if(M > N) {
    larger_dim = M;
    smaller_dim = N;
}

for(int diag = 1; diag < (N+M)-3; diag++){
    int diag_length = diag;

    if(diag + 1 > smaller_dim)
        diag_length = smaller_dim - 1;
    
    if(diag + 1 > larger_dim)
        diag_length = smaller_dim - 1 - (diag - larger_dim) - 1;

    #pragma omp parallel for default(none) \ shared(diag, diag_length, data, N, M)
    for(int k=0;k<diag_length;k++){
        int i = diag - k;
        int j = k + 1;

        if(diag > N-1) {
            i = N-k-1;
            j = diag-N+k+2;
        }

		data[i][j] = data[i-1][j] + data[i][j-1] + data[i-1][j-1];
    }
}

for(i = 0;i < N;i++){  
   a[i] = a[i+1]+c;  
}

===========================================

for(int i=0;i<N;i++)
    a1[i] = a[i+1]+c;

#pragma omp parallel for 
for(int i=0;i<N;i++)
    a[i] = a1[i]+c;




int max_elem = data[0];
for(i=1;i<N;i++){
	if(data[i] > max_elem){
		max_elem = data[i];
	}
}

===========================================

int max_elem = data[0];
#pragma omp parallel for reduction(max: max_elem)
for(i=1;i<N;i++){
    if(data[i]>max_elem)
        max_elem = data[i];
}




double v = start;
for(int i=0;i<100;i++) {
	v = v + step;
}

============================================

double v = start;
#pragma omp parallel for private(v) shared(step)
for(int i=0;i<100;i++){
    v = i*step + start
}



double sum = 0;
for(int i=0;i<100;i++) {
	sum = sum + f(v);
}

=============================================

double sum = 0;
#pragma omp parallel for reduction(sum)
for(int i=0;i<100;i++) {
    sum = f(v)
}



for(int i=1;i<100;i++) {
	y[i] = f(x[i-1]);
	x[i] = x[i] + c[i];
}

==============================================

y[0] = f(0);
#pragma omp parallel for 
for(int i=0;i<100;i++) {
    x[i] = x[i] + c[i];
    y[i+1] = f(x[i]);
}



for(int i=1;i<N;i++) {
	for(int j=1;j<M;j++) {
		data[i][j] = data[i-1][j] + data[i-1][j-1];
	}
}

================================================

for(int i=1;i<N;i++) {
    #pragma omp parallel for
    for(int j=1;j<M;j++){
		data[i][j] = data[i-1][j] + data[i-1][j-1];
    }
}




s = b[0];
for(int i=1;i<100;i++) {
	a[i] = a[i] + a[i-1];
	s = s + b[i];
}

=================================================

for(int i=1;i<100;i++) {
    a[i] = a[i] + a[i-1];
}

s = b[0];
#pragma omp parallel for reduction(+: s)
for(int i=1;i<100;i++) {
    s = s + b[i];
}




for(i=2;i<N;i++){
	f[i] = f[i-1] + f[i-2];
}

===================================================

for(i=2;i<N;i++){
    int x = f[i-1];
    int y = f[i-2];
    f[i] = x + y;
}

